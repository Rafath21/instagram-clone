async function handleCurrUserlike() {
    let postDocRef = firestore
      .collection("users")
      .doc(props.post.postedByUid)
      .collection("posts")
      .doc(props.post.postId);
    let likesArr = await postDocRef.get();
    likesArr = likesArr.data().likes;
    console.log(likesArr);
    if (likesArr?.length >= 0 && !likesArr.includes(currUserId)) {
      let temp = props.post.likes?.length;
      temp = temp + 1;
      setLikes(temp);
      await postDocRef.set(
        {
          likes: firebase.firestore.FieldValue.arrayUnion(currUserId),
        },
        { merge: true }
      );
    } else {
      console.log("in else");
      let temp = props.post.likes?.length;
      temp = temp - 1;
      setLikes(temp);
      await postDocRef.set(
        {
          likes: firebase.firestore.FieldValue.arrayRemove(currUserId),
        },
        { merge: true }
      );
    }
    if (props.post.postedByUid == currUserId) {
      let ownDocRef = firestore
        .collection("users")
        .doc(currUserId)
        .collection("feedItems")
        .doc(props.post.postId);
      let ownDocDetails = await ownDocRef.get();
      if (ownDocDetails.exists) {
        let checkOwnLikes = ownDocDetails.data().likes;
        if (checkOwnLikes.length >= 0 && !checkOwnLikes.includes(currUserId)) {
          await ownDocRef.update(
            {
              likes: firebase.firestore.FieldValue.arrayUnion(currUserId),
            },
            { merge: true }
          );
        } else {
          await ownDocRef.update(
            {
              likes: firebase.firestore.FieldValue.arrayRemove(currUserId),
            },
            { merge: true }
          );
        }
      }
    }
    let querySnapshot = await firestore
      .collection("users")
      .doc(props.post.postedByUid)
      .collection("followers")
      .get();
    querySnapshot.forEach(async (doc) => {
      let feedItemDocRef = firestore
        .collection("users")
        .doc(doc.data().ruid)
        .collection("feedItems")
        .doc(props.post.postId);
      let checkExists = await feedItemDocRef.get();
      console.log(checkExists);
      if (checkExists.exists) {
        let feedItemLikes = checkExists.data().likes;
        if (feedItemLikes.length >= 0 && !feedItemLikes.includes(currUserId)) {
          await feedItemDocRef.update(
            {
              likes: firebase.firestore.FieldValue.arrayUnion(currUserId),
            },
            { merge: true }
          );
        } else {
          console.log("in else");
          await feedItemDocRef.update(
            {
              likes: firebase.firestore.FieldValue.arrayRemove(currUserId),
            },
            { merge: true }
          );
        }
      } else {
        console.log("it does not exist");
      }
    });
  }