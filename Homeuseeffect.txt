useEffect(async () => {
    let document = await firestore.collection("users").doc(value?.uid).get();
    let creds = document.data();
    settypeOfAccount(creds.typeOfAccount);
    setUserName(creds.username);
    setpfpUrl(creds.photoURL);
  }, []);
  useEffect(async () => {
    let unsubscriptionStories = await firestore
      .collection("users")
      .doc(value?.uid)
      .collection("storiesFeed")
      .onSnapshot((querySnapshot) => {
        setStoriesArr(
          querySnapshot.docs.map((doc) => {
            return { ...doc.data() };
          })
        );
      });
 let unsubscriptionReqs = firestore
      .collection("users")
      .doc(value?.uid)
      .collection("requests")
      .onSnapshot((querySnapshot) => {
        setRequests(
          querySnapshot.docs.map((doc) => {
            return { ...doc.data() };
          })
        );
        setnotificationCount(querySnapshot.docs.length);
      });
      let unsubscriptionChats= firestore
      .collection("users")
      .doc(value?.uid)
      .collection("chats")
      .onSnapshot((querySnapshot) => {
        querySnapshot.docs.map((doc) => {
          return { ...doc.data() };
        });
         setmessagesCount(querySnapshot.docs.length);
      });
       let unsubscriptionFeed = await firestore
      .collection("users")
      .doc(value?.uid)
      .collection("feedItems")
      .orderBy("timestamp", "desc")
      .onSnapshot((querySnapshot) => {
        setfeedPosts(
          querySnapshot.docs.map((doc) => {
            return { ...doc.data() };
          })
        );
      });
    return () => {
      unsubscriptionStories();
      unsubscriptionChats();
      unsubscriptionFeed();
      unsubscriptionReqs();

    };
  }, []);
 useEffect(async () => {
    let users = await firestore.collection("users").get();
    let arr = [];
    let obj = {};
    users.forEach((doc) => {
      obj = {
        uid: doc.data().uid,
        username: doc.data().username,
        pfpUrl: doc.data().photoURL,
      };
      arr.push(obj);
    });
    setallUsers(arr);
  }, []);

  /* ORIGINAL USEEFFECT */
   useEffect(async () => {
    let document = await firestore.collection("users").doc(value?.uid).get();
    let creds = document.data();
    settypeOfAccount(creds.typeOfAccount);
    setUserName(creds.username);
    setpfpUrl(creds.photoURL);
  }, []);
  useEffect(async () => {
    let unsubscription = await firestore
      .collection("users")
      .doc(value?.uid)
      .collection("storiesFeed")
      .onSnapshot((querySnapshot) => {
        setStoriesArr(
          querySnapshot.docs.map((doc) => {
            return { ...doc.data() };
          })
        );
      });
    return () => {
      unsubscription();
    };
  }, []);
  useEffect(async () => {
    let unsubscription = firestore
      .collection("users")
      .doc(value?.uid)
      .collection("requests")
      .onSnapshot((querySnapshot) => {
        setRequests(
          querySnapshot.docs.map((doc) => {
            return { ...doc.data() };
          })
        );
        setnotificationCount(querySnapshot.docs.length);
      });
    return () => {
      unsubscription();
    };
  }, []);
  useEffect(async () => {
    let unsubscription = firestore
      .collection("users")
      .doc(value?.uid)
      .collection("chats")
      .onSnapshot((querySnapshot) => {
        querySnapshot.docs.map((doc) => {
          return { ...doc.data() };
        });

        setmessagesCount(querySnapshot.docs.length);
      });
    return () => {
      unsubscription();
    };
  }, []);

  useEffect(async () => {
    let unsubscription = await firestore
      .collection("users")
      .doc(value?.uid)
      .collection("feedItems")
      .orderBy("timestamp", "desc")
      .onSnapshot((querySnapshot) => {
        setfeedPosts(
          querySnapshot.docs.map((doc) => {
            return { ...doc.data() };
          })
        );
      });
    return () => {
      unsubscription();
    };
  }, []);
  useEffect(async () => {
    let users = await firestore.collection("users").get();
    let arr = [];
    let obj = {};
    users.forEach((doc) => {
      obj = {
        uid: doc.data().uid,
        username: doc.data().username,
        pfpUrl: doc.data().photoURL,
      };
      arr.push(obj);
    });
    setallUsers(arr);
  }, []);